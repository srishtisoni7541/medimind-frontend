import React, { useState, useEffect, useContext } from 'react';
import { Link } from 'react-router-dom';
import { RefreshCw, Book, Lightbulb, ArrowRight, Sparkles } from 'lucide-react';
import axios from 'axios';
import { AppContext } from '../context/AppContext';
import MentalNav from '../components/MentalNav';
const Insights = () => {
  const { backendUrl,token } = useContext(AppContext);
  const [loading, setLoading] = useState(true);
  const [insights, setInsights] = useState({
    summary: '',
    patterns: [],
    recommendations: []
  });

  useEffect(() => {
    fetchInsights();
  }, []);

  const fetchInsights = async () => {
    try {
      setLoading(true);
      const res = await axios.get(`${backendUrl}/api/analysis/insights`,{ headers: { utoken: token } });
      
      // If the API returns the full insights object
      if (res.data.insights) {
        setInsights({
          summary: res.data.insights.summary || '',
          patterns: res.data.insights.patterns || [],
          recommendations: res.data.insights.recommendations || []
        });
      } else {
        // Fallback if the API structure is different
        setInsights({
          summary: '',
          patterns: Array.isArray(res.data.insights) ? res.data.insights : [],
          recommendations: []
        });
      }
    } catch (err) {
      console.error('Error fetching insights:', err);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="flex flex-col items-center">
          <div className="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
          <p className="mt-4 text-lg text-gray-700">Analyzing your wellness data...</p>
        </div>
      </div>
    );
  }

  const hasInsights = insights.patterns && insights.patterns.length > 0;

  return (
    <div className="max-w-7xl pt-[15vh] mx-auto px-4 sm:px-6 lg:px-8 py-8 bg-gray-50 min-h-screen">
      <MentalNav/>
      {/* Page Header */}
      <div className="mb-8 bg-white rounded-xl shadow-sm p-6 border border-gray-100">
        <div className="flex items-center">
          <div className="p-2 bg-blue-100 rounded-lg mr-3">
            <Lightbulb size={28} className="text-blue-600" />
          </div>
          <div>
            <h1 className="text-2xl font-bold text-gray-800">Your Personal Insights</h1>
            <p className="mt-1 text-gray-500">Patterns and observations based on your wellness journey</p>
          </div>
        </div>
      </div>
      
      {!hasInsights ? (
        <div className="bg-white rounded-xl shadow-sm p-8 border border-gray-100 text-center">
          <div className="max-w-md mx-auto">
            <div className="mb-6 flex justify-center">
              <div className="p-4 bg-blue-50 rounded-full">
                <Sparkles size={48} className="text-blue-500" />
              </div>
            </div>
            <h2 className="text-xl font-semibold text-gray-800 mb-4">No insights available yet</h2>
            <p className="text-gray-600 mb-4">
              Continue journaling regularly to receive personalized insights based on your entries. 
              We recommend at least 5-7 entries to start identifying meaningful patterns.
            </p>
            <Link to="/journal/new" className="inline-flex items-center justify-center py-3 px-6 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-300">
              <Book size={18} className="mr-2" /> Write a Journal Entry
            </Link>
          </div>
        </div>
      ) : (
        <div className="space-y-6">
          {/* Summary Section */}
          {insights.summary && (
            <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
              <h2 className="text-xl font-semibold text-gray-800 mb-4">Summary</h2>
              <div className="p-4 bg-blue-50 rounded-lg border-l-4 border-blue-500">
                <p className="text-gray-700 leading-relaxed">{insights.summary}</p>
              </div>
            </div>
          )}
          
          {/* Patterns Section */}
          <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">Observed Patterns</h2>
            <p className="text-gray-600 mb-6">
              These insights are generated by analyzing patterns in your journal entries and mood data 
              to help you gain deeper understanding of your mental wellbeing.
            </p>
            
            <div className="space-y-4">
              {insights.patterns.map((insight, index) => (
                <div key={index} className="flex p-4 bg-white rounded-lg border border-gray-200 hover:border-blue-200 hover:shadow-sm transition-all duration-300">
                  <div className="flex-shrink-0 flex items-center justify-center w-10 h-10 rounded-full bg-blue-100 text-blue-600 font-semibold mr-4">
                    {index + 1}
                  </div>
                  <div className="flex-grow">
                    <p className="text-gray-700">{insight}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          {/* Recommendations Section */}
          {insights.recommendations && insights.recommendations.length > 0 && (
            <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
              <h2 className="text-xl font-semibold text-gray-800 mb-4">Recommendations</h2>
              <div className="grid gap-4 md:grid-cols-2">
                {insights.recommendations.map((recommendation, index) => (
                  <div key={index} className="p-4 bg-blue-50 rounded-lg">
                    <div className="flex items-center mb-2">
                      <div className="w-6 h-6 flex items-center justify-center rounded-full bg-blue-500 text-white text-xs font-medium mr-2">
                        {index + 1}
                      </div>
                      <h3 className="font-medium text-blue-800">Recommendation</h3>
                    </div>
                    <p className="text-gray-700">{recommendation}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Refresh Section */}
          <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 flex flex-col sm:flex-row items-center justify-between">
            <div>
              <p className="text-gray-600 mb-4 sm:mb-0 text-center sm:text-left">
                Insights are updated based on your most recent journal entries and mood data.
              </p>
            </div>
            <button 
              onClick={fetchInsights} 
              className="inline-flex items-center py-2 px-4 bg-white border border-blue-500 text-blue-600 hover:bg-blue-50 font-medium rounded-lg transition-colors duration-300"
            >
              <RefreshCw size={18} className="mr-2" /> Refresh Insights
            </button>
          </div>
          
          {/* Call to Action */}
          <div className="bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl shadow-sm p-6 text-white">
            <div className="flex flex-col sm:flex-row items-center justify-between">
              <div className="mb-4 sm:mb-0">
                <h3 className="text-xl font-semibold mb-1">Continue Your Wellness Journey</h3>
                <p className="text-blue-100">Regular journaling helps improve your insights.</p>
              </div>
              <div className="flex space-x-4">
                <Link 
                  to="/journal/new" 
                  className="inline-flex items-center py-2 px-4 bg-white text-blue-600 hover:bg-blue-50 font-medium rounded-lg transition-colors duration-300"
                >
                  Write New Entry <ArrowRight size={16} className="ml-2" />
                </Link>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Insights;